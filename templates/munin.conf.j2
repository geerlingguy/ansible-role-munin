# Munin master configuration.

# Location of the databases, HTML output, logs, and pid files.
dbdir  {{ munin_dbdir }}
htmldir {{ munin_htmldir }}
logdir {{ munin_logdir }}
rundir  {{ munin_rundir }}

# Where to look for the HTML templates
tmpldir  /etc/munin/templates

# Where to look for the static www files
#staticdir /etc/munin/static

# temporary cgi files are here. note that it has to be writable by
# the cgi user (usually nobody or httpd).
#
# cgitmpdir @@CGITMPDIR@@

# (Exactly one) directory to include all files from.
includedir {{ munin_includedir }}

# You can choose the time reference for "DERIVE" like graphs, and show
# "per minute", "per hour" values instead of the default "per second"
#graph_period second

# Graphics files are generated either via cron or by a CGI process.
# See http://munin-monitoring.org/wiki/CgiHowto2 for more
# documentation.
# Since 2.0, munin-graph has been rewritten to use the cgi code.
# It is single threaded *by design* now.
graph_strategy cron

# munin-cgi-graph is invoked by the web server up to very many times at the
# same time.  This is not optimal since it results in high CPU and memory
# consumption to the degree that the system can thrash.  Again the default is
# 6.  Most likely the optimal number for max_cgi_graph_jobs is the same as
# max_graph_jobs.
#munin_cgi_graph_jobs 6

# If the automatic CGI url is wrong for your system override it here:
cgiurl_graph /munin-cgi/munin-cgi-graph

# max_size_x and max_size_y are the max size of images in pixel.
# Default is 4000. Do not make it too large otherwise RRD might use all
# RAM to generate the images.
#max_size_x 4000
#max_size_y 4000

# HTML files are normally generated by munin-html, no matter if the
# files are used or not. You can change this to on-demand generation
# by following the instructions in http://munin-monitoring.org/wiki/CgiHowto2
# Notes:
# - moving to CGI for HTML means you cannot have graph generated by cron.
# - cgi html has some bugs, mostly you still have to launch munin-html by hand
html_strategy {{ munin_html_strategy }}

# munin-update runs in parallel.
#
# The default max number of processes is 16, and is probably ok for you.
#
# If set too high, it might hit some process/ram/filedesc limits.
# If set too low, munin-update might take more than 5 min.
#
# If you want munin-update to not be parallel set it to 0.
max_processes {{ munin_max_processes }}

# RRD updates are per default, performed directly on the rrd files.
# To reduce IO and enable the use of the rrdcached, uncomment it and set it to
# the location of the socket that rrdcached uses.
#rrdcached_socket /var/run/rrdcached.sock

# Drop somejuser@fnord.comm and anotheruser@blibb.comm an email everytime
# something changes (OK -> WARNING, CRITICAL -> OK, etc)
#contact.someuser.command mail -s "Munin notification" somejuser@fnord.comm
#contact.anotheruser.command mail -s "Munin notification" anotheruser@blibb.comm

{% if munin_alerts %}
{% for contact in munin_alerts %}
contacts {{ contact.name }}
contact.{{ contact.name }}.command mail -s "{{ contact.subject }}" {{ contact.email }}
{% if contact.level is defined %}
contact.{{ contact.name }}.always_send {{ contact.level }}
{% endif %}
{% if contact.text is defined %}
contact.{{ contact.name }}.text {{ contact.text }}
{% endif %}
{% endfor %}
{% endif %}

#
# For those with Nagios, the following might come in handy. In addition,
# the services must be defined in the Nagios server as well.
#contact.nagios.command /usr/bin/send_nsca nagios.host.comm -c /etc/nsca.conf

# Hosts are defined separately, in {{ munin_includedir }}
